{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst path = require('path');\n\nconst app = express();\n\nconst https = require(\"https\");\n\nconst fs = require('fs');\n\nconst server = https.createServer({\n  key: fs.readFileSync('server.key'),\n  cert: fs.readFileSync('server.cert')\n}, app);\n\nconst socket = require(\"socket.io\");\n\nconst io = socket(server); //\n\nserver.use(express.static(path.join(__dirname, 'build')));\nserver.get('/ping', function (req, res) {\n  return res.send('pong');\n});\nserver.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n}); //\n// Video\n\nconst users = {};\nio.on('connection', socket => {\n  if (!users[socket.id]) {\n    users[socket.id] = socket.id;\n  }\n\n  socket.emit(\"yourID\", socket.id);\n  io.sockets.emit(\"allUsers\", users);\n  socket.on('disconnect', () => {\n    delete users[socket.id];\n  });\n  socket.on(\"callUser\", data => {\n    io.to(data.userToCall).emit('hey', {\n      signal: data.signalData,\n      from: data.from\n    });\n  });\n  socket.on(\"acceptCall\", data => {\n    io.to(data.to).emit('callAccepted', data.signal);\n  });\n}); // fin Video\n\nserver.listen(process.env.PORT || 8080);","map":{"version":3,"sources":["C:/Users/corta_000/Desktop/rendus-master/Front-end/my-app/server.js"],"names":["express","require","bodyParser","path","app","https","fs","server","createServer","key","readFileSync","cert","socket","io","use","static","join","__dirname","get","req","res","send","sendFile","users","on","id","emit","sockets","data","to","userToCall","signal","signalData","from","listen","process","env","PORT"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;;AACA,MAAMK,KAAK,GAAGJ,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMK,EAAE,GAAGL,OAAO,CAAC,IAAD,CAAlB;;AACA,MAAMM,MAAM,GAAGF,KAAK,CAACG,YAAN,CAAmB;AAC9BC,EAAAA,GAAG,EAAEH,EAAE,CAACI,YAAH,CAAgB,YAAhB,CADyB;AAE9BC,EAAAA,IAAI,EAAEL,EAAE,CAACI,YAAH,CAAgB,aAAhB;AAFwB,CAAnB,EAGZN,GAHY,CAAf;;AAIA,MAAMQ,MAAM,GAAGX,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMY,EAAE,GAAGD,MAAM,CAACL,MAAD,CAAjB,C,CAEA;;AACAA,MAAM,CAACO,GAAP,CAAWd,OAAO,CAACe,MAAR,CAAeZ,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAf,CAAX;AAEAV,MAAM,CAACW,GAAP,CAAW,OAAX,EAAoB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvC,SAAOA,GAAG,CAACC,IAAJ,CAAS,MAAT,CAAP;AACA,CAFD;AAIAd,MAAM,CAACW,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAClCA,EAAAA,GAAG,CAACE,QAAJ,CAAanB,IAAI,CAACa,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,YAA9B,CAAb;AACD,CAFD,E,CAGA;AAEA;;AACA,MAAMM,KAAK,GAAG,EAAd;AAEAV,EAAE,CAACW,EAAH,CAAM,YAAN,EAAoBZ,MAAM,IAAI;AAC1B,MAAI,CAACW,KAAK,CAACX,MAAM,CAACa,EAAR,CAAV,EAAuB;AACnBF,IAAAA,KAAK,CAACX,MAAM,CAACa,EAAR,CAAL,GAAmBb,MAAM,CAACa,EAA1B;AACH;;AACDb,EAAAA,MAAM,CAACc,IAAP,CAAY,QAAZ,EAAsBd,MAAM,CAACa,EAA7B;AACAZ,EAAAA,EAAE,CAACc,OAAH,CAAWD,IAAX,CAAgB,UAAhB,EAA4BH,KAA5B;AACAX,EAAAA,MAAM,CAACY,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B,WAAOD,KAAK,CAACX,MAAM,CAACa,EAAR,CAAZ;AACH,GAFD;AAIAb,EAAAA,MAAM,CAACY,EAAP,CAAU,UAAV,EAAuBI,IAAD,IAAU;AAC5Bf,IAAAA,EAAE,CAACgB,EAAH,CAAMD,IAAI,CAACE,UAAX,EAAuBJ,IAAvB,CAA4B,KAA5B,EAAmC;AAACK,MAAAA,MAAM,EAAEH,IAAI,CAACI,UAAd;AAA0BC,MAAAA,IAAI,EAAEL,IAAI,CAACK;AAArC,KAAnC;AACH,GAFD;AAIArB,EAAAA,MAAM,CAACY,EAAP,CAAU,YAAV,EAAyBI,IAAD,IAAU;AAC9Bf,IAAAA,EAAE,CAACgB,EAAH,CAAMD,IAAI,CAACC,EAAX,EAAeH,IAAf,CAAoB,cAApB,EAAoCE,IAAI,CAACG,MAAzC;AACH,GAFD;AAGH,CAjBD,E,CAkBA;;AAEAxB,MAAM,CAAC2B,MAAP,CAAcC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAlC","sourcesContent":["const express = require('express');\nconst bodyParser = require('body-parser')\nconst path = require('path');\nconst app = express();\nconst https = require(\"https\");\nconst fs = require('fs');\nconst server = https.createServer({\n    key: fs.readFileSync('server.key'),\n    cert: fs.readFileSync('server.cert')\n}, app);\nconst socket = require(\"socket.io\");\nconst io = socket(server);\n\n//\nserver.use(express.static(path.join(__dirname, 'build')));\n\nserver.get('/ping', function (req, res) {\n return res.send('pong');\n});\n\nserver.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n});\n//\n \n// Video\nconst users = {};\n\nio.on('connection', socket => {\n    if (!users[socket.id]) {\n        users[socket.id] = socket.id;\n    }\n    socket.emit(\"yourID\", socket.id);\n    io.sockets.emit(\"allUsers\", users);\n    socket.on('disconnect', () => {\n        delete users[socket.id];\n    })\n\n    socket.on(\"callUser\", (data) => {\n        io.to(data.userToCall).emit('hey', {signal: data.signalData, from: data.from});\n    })\n\n    socket.on(\"acceptCall\", (data) => {\n        io.to(data.to).emit('callAccepted', data.signal);\n    })\n});\n// fin Video\n\nserver.listen(process.env.PORT || 8080);"]},"metadata":{},"sourceType":"script"}