{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _get = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/get\");\n\nvar _getPrototypeOf = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Manager = void 0;\n\nvar eio = require(\"engine.io-client\");\n\nvar socket_1 = require(\"./socket\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar parser = require(\"socket.io-parser\");\n\nvar on_1 = require(\"./on\");\n\nvar bind = require(\"component-bind\");\n\nvar Backoff = require(\"backo2\");\n\nvar debug = require(\"debug\")(\"socket.io-client:manager\");\n\nvar Manager = /*#__PURE__*/function (_Emitter) {\n  _inherits(Manager, _Emitter);\n\n  var _super = _createSuper(Manager);\n\n  function Manager(uri, opts) {\n    var _this;\n\n    _classCallCheck(this, Manager);\n\n    _this = _super.call(this);\n    _this.nsps = {};\n    _this.subs = [];\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = undefined;\n    }\n\n    opts = opts || {};\n    opts.path = opts.path || \"/socket.io\";\n    _this.opts = opts;\n\n    _this.reconnection(opts.reconnection !== false);\n\n    _this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\n\n    _this.reconnectionDelay(opts.reconnectionDelay || 1000);\n\n    _this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\n\n    _this.randomizationFactor(opts.randomizationFactor || 0.5);\n\n    _this.backoff = new Backoff({\n      min: _this.reconnectionDelay(),\n      max: _this.reconnectionDelayMax(),\n      jitter: _this.randomizationFactor()\n    });\n\n    _this.timeout(null == opts.timeout ? 20000 : opts.timeout);\n\n    _this._readyState = \"closed\";\n    _this.uri = uri;\n\n    var _parser = opts.parser || parser;\n\n    _this.encoder = new _parser.Encoder();\n    _this.decoder = new _parser.Decoder();\n    _this._autoConnect = opts.autoConnect !== false;\n    if (_this._autoConnect) _this.open();\n    return _this;\n  }\n\n  _createClass(Manager, [{\n    key: \"reconnection\",\n    value: function reconnection(v) {\n      if (!arguments.length) return this._reconnection;\n      this._reconnection = !!v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionAttempts\",\n    value: function reconnectionAttempts(v) {\n      if (v === undefined) return this._reconnectionAttempts;\n      this._reconnectionAttempts = v;\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelay\",\n    value: function reconnectionDelay(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelay;\n      this._reconnectionDelay = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\n      return this;\n    }\n  }, {\n    key: \"randomizationFactor\",\n    value: function randomizationFactor(v) {\n      var _a;\n\n      if (v === undefined) return this._randomizationFactor;\n      this._randomizationFactor = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\n      return this;\n    }\n  }, {\n    key: \"reconnectionDelayMax\",\n    value: function reconnectionDelayMax(v) {\n      var _a;\n\n      if (v === undefined) return this._reconnectionDelayMax;\n      this._reconnectionDelayMax = v;\n      (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\n      return this;\n    }\n  }, {\n    key: \"timeout\",\n    value: function timeout(v) {\n      if (!arguments.length) return this._timeout;\n      this._timeout = v;\n      return this;\n    }\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"maybeReconnectOnOpen\",\n    value: function maybeReconnectOnOpen() {\n      // Only try to reconnect if it's the first time we're connecting\n      if (!this._reconnecting && this._reconnection && this.backoff.attempts === 0) {\n        // keeps reconnection from firing twice for the same reconnection loop\n        this.reconnect();\n      }\n    }\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open(fn) {\n      var _this2 = this;\n\n      debug(\"readyState %s\", this._readyState);\n      if (~this._readyState.indexOf(\"open\")) return this;\n      debug(\"opening %s\", this.uri);\n      this.engine = eio(this.uri, this.opts);\n      var socket = this.engine;\n      var self = this;\n      this._readyState = \"opening\";\n      this.skipReconnect = false; // emit `open`\n\n      var openSub = on_1.on(socket, \"open\", function () {\n        self.onopen();\n        fn && fn();\n      }); // emit `error`\n\n      var errorSub = on_1.on(socket, \"error\", function (err) {\n        debug(\"error\");\n        self.cleanup();\n        self._readyState = \"closed\";\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", _this2).call(_this2, \"error\", err);\n\n        if (fn) {\n          fn(err);\n        } else {\n          // Only do this if there is no fn to handle the error\n          self.maybeReconnectOnOpen();\n        }\n      });\n\n      if (false !== this._timeout) {\n        var timeout = this._timeout;\n        debug(\"connect attempt will timeout after %d\", timeout);\n\n        if (timeout === 0) {\n          openSub.destroy(); // prevents a race condition with the 'open' event\n        } // set timer\n\n\n        var timer = setTimeout(function () {\n          debug(\"connect attempt timed out after %d\", timeout);\n          openSub.destroy();\n          socket.close();\n          socket.emit(\"error\", new Error(\"timeout\"));\n        }, timeout);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(timer);\n          }\n        });\n      }\n\n      this.subs.push(openSub);\n      this.subs.push(errorSub);\n      return this;\n    }\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return {Manager} self\r\n     * @public\r\n     */\n\n  }, {\n    key: \"connect\",\n    value: function connect(fn) {\n      return this.open(fn);\n    }\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onopen\",\n    value: function onopen() {\n      debug(\"open\"); // clear old subs\n\n      this.cleanup(); // mark as open\n\n      this._readyState = \"open\";\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"open\"); // add new subs\n\n\n      var socket = this.engine;\n      this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")), on_1.on(socket, \"ping\", bind(this, \"onping\")), on_1.on(socket, \"error\", bind(this, \"onerror\")), on_1.on(socket, \"close\", bind(this, \"onclose\")), on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\n    }\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onping\",\n    value: function onping() {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"ping\");\n    }\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondata\",\n    value: function ondata(data) {\n      this.decoder.add(data);\n    }\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"ondecoded\",\n    value: function ondecoded(packet) {\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"packet\", packet);\n    }\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onerror\",\n    value: function onerror(err) {\n      debug(\"error\", err);\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"error\", err);\n    }\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\n\n  }, {\n    key: \"socket\",\n    value: function socket(nsp, opts) {\n      var socket = this.nsps[nsp];\n\n      if (!socket) {\n        socket = new socket_1.Socket(this, nsp, opts);\n        this.nsps[nsp] = socket;\n      }\n\n      return socket;\n    }\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_destroy\",\n    value: function _destroy(socket) {\n      var nsps = Object.keys(this.nsps);\n\n      for (var _i = 0, _nsps = nsps; _i < _nsps.length; _i++) {\n        var nsp = _nsps[_i];\n        var _socket = this.nsps[nsp];\n\n        if (_socket.active) {\n          debug(\"socket %s is still active, skipping close\", nsp);\n          return;\n        }\n      }\n\n      this._close();\n    }\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_packet\",\n    value: function _packet(packet) {\n      debug(\"writing packet %j\", packet);\n      if (packet.query && packet.type === 0) packet.nsp += \"?\" + packet.query;\n      var encodedPackets = this.encoder.encode(packet);\n\n      for (var i = 0; i < encodedPackets.length; i++) {\n        this.engine.write(encodedPackets[i], packet.options);\n      }\n    }\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"cleanup\",\n    value: function cleanup() {\n      debug(\"cleanup\");\n      var subsLength = this.subs.length;\n\n      for (var i = 0; i < subsLength; i++) {\n        var sub = this.subs.shift();\n        sub.destroy();\n      }\n\n      this.decoder.destroy();\n    }\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"_close\",\n    value: function _close() {\n      debug(\"disconnect\");\n      this.skipReconnect = true;\n      this._reconnecting = false;\n\n      if (\"opening\" === this._readyState) {\n        // `onclose` will not fire because\n        // an open event never happened\n        this.cleanup();\n      }\n\n      this.backoff.reset();\n      this._readyState = \"closed\";\n      if (this.engine) this.engine.close();\n    }\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"disconnect\",\n    value: function disconnect() {\n      return this._close();\n    }\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onclose\",\n    value: function onclose(reason) {\n      debug(\"onclose\");\n      this.cleanup();\n      this.backoff.reset();\n      this._readyState = \"closed\";\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"close\", reason);\n\n      if (this._reconnection && !this.skipReconnect) {\n        this.reconnect();\n      }\n    }\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"reconnect\",\n    value: function reconnect() {\n      var _this3 = this;\n\n      if (this._reconnecting || this.skipReconnect) return this;\n      var self = this;\n\n      if (this.backoff.attempts >= this._reconnectionAttempts) {\n        debug(\"reconnect failed\");\n        this.backoff.reset();\n\n        _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect_failed\");\n\n        this._reconnecting = false;\n      } else {\n        var delay = this.backoff.duration();\n        debug(\"will wait %dms before reconnect attempt\", delay);\n        this._reconnecting = true;\n        var timer = setTimeout(function () {\n          if (self.skipReconnect) return;\n          debug(\"attempting reconnect\");\n\n          _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_attempt\", self.backoff.attempts); // check again for the case socket closed in above events\n\n\n          if (self.skipReconnect) return;\n          self.open(function (err) {\n            if (err) {\n              debug(\"reconnect attempt error\");\n              self._reconnecting = false;\n              self.reconnect();\n\n              _get(_getPrototypeOf(Manager.prototype), \"emit\", _this3).call(_this3, \"reconnect_error\", err);\n            } else {\n              debug(\"reconnect success\");\n              self.onreconnect();\n            }\n          });\n        }, delay);\n        this.subs.push({\n          destroy: function destroy() {\n            clearTimeout(timer);\n          }\n        });\n      }\n    }\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\n\n  }, {\n    key: \"onreconnect\",\n    value: function onreconnect() {\n      var attempt = this.backoff.attempts;\n      this._reconnecting = false;\n      this.backoff.reset();\n\n      _get(_getPrototypeOf(Manager.prototype), \"emit\", this).call(this, \"reconnect\", attempt);\n    }\n  }]);\n\n  return Manager;\n}(Emitter);\n\nexports.Manager = Manager;","map":{"version":3,"sources":["C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/socket.io-client/build/manager.js"],"names":["Object","defineProperty","exports","value","Manager","eio","require","socket_1","Emitter","parser","on_1","bind","Backoff","debug","uri","opts","nsps","subs","undefined","path","reconnection","reconnectionAttempts","Infinity","reconnectionDelay","reconnectionDelayMax","randomizationFactor","backoff","min","max","jitter","timeout","_readyState","_parser","encoder","Encoder","decoder","Decoder","_autoConnect","autoConnect","open","v","arguments","length","_reconnection","_reconnectionAttempts","_a","_reconnectionDelay","setMin","_randomizationFactor","setJitter","_reconnectionDelayMax","setMax","_timeout","_reconnecting","attempts","reconnect","fn","indexOf","engine","socket","self","skipReconnect","openSub","on","onopen","errorSub","err","cleanup","maybeReconnectOnOpen","destroy","timer","setTimeout","close","emit","Error","push","clearTimeout","data","add","packet","nsp","Socket","keys","active","_close","query","type","encodedPackets","encode","i","write","options","subsLength","sub","shift","reset","reason","delay","duration","onreconnect","attempt"],"mappings":"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","sourcesContent":["\"use strict\";\r\nObject.defineProperty(exports, \"__esModule\", { value: true });\r\nexports.Manager = void 0;\r\nconst eio = require(\"engine.io-client\");\r\nconst socket_1 = require(\"./socket\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst parser = require(\"socket.io-parser\");\r\nconst on_1 = require(\"./on\");\r\nconst bind = require(\"component-bind\");\r\nconst Backoff = require(\"backo2\");\r\nconst debug = require(\"debug\")(\"socket.io-client:manager\");\r\nclass Manager extends Emitter {\r\n    constructor(uri, opts) {\r\n        super();\r\n        this.nsps = {};\r\n        this.subs = [];\r\n        if (uri && \"object\" === typeof uri) {\r\n            opts = uri;\r\n            uri = undefined;\r\n        }\r\n        opts = opts || {};\r\n        opts.path = opts.path || \"/socket.io\";\r\n        this.opts = opts;\r\n        this.reconnection(opts.reconnection !== false);\r\n        this.reconnectionAttempts(opts.reconnectionAttempts || Infinity);\r\n        this.reconnectionDelay(opts.reconnectionDelay || 1000);\r\n        this.reconnectionDelayMax(opts.reconnectionDelayMax || 5000);\r\n        this.randomizationFactor(opts.randomizationFactor || 0.5);\r\n        this.backoff = new Backoff({\r\n            min: this.reconnectionDelay(),\r\n            max: this.reconnectionDelayMax(),\r\n            jitter: this.randomizationFactor(),\r\n        });\r\n        this.timeout(null == opts.timeout ? 20000 : opts.timeout);\r\n        this._readyState = \"closed\";\r\n        this.uri = uri;\r\n        const _parser = opts.parser || parser;\r\n        this.encoder = new _parser.Encoder();\r\n        this.decoder = new _parser.Decoder();\r\n        this._autoConnect = opts.autoConnect !== false;\r\n        if (this._autoConnect)\r\n            this.open();\r\n    }\r\n    reconnection(v) {\r\n        if (!arguments.length)\r\n            return this._reconnection;\r\n        this._reconnection = !!v;\r\n        return this;\r\n    }\r\n    reconnectionAttempts(v) {\r\n        if (v === undefined)\r\n            return this._reconnectionAttempts;\r\n        this._reconnectionAttempts = v;\r\n        return this;\r\n    }\r\n    reconnectionDelay(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelay;\r\n        this._reconnectionDelay = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMin(v);\r\n        return this;\r\n    }\r\n    randomizationFactor(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._randomizationFactor;\r\n        this._randomizationFactor = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setJitter(v);\r\n        return this;\r\n    }\r\n    reconnectionDelayMax(v) {\r\n        var _a;\r\n        if (v === undefined)\r\n            return this._reconnectionDelayMax;\r\n        this._reconnectionDelayMax = v;\r\n        (_a = this.backoff) === null || _a === void 0 ? void 0 : _a.setMax(v);\r\n        return this;\r\n    }\r\n    timeout(v) {\r\n        if (!arguments.length)\r\n            return this._timeout;\r\n        this._timeout = v;\r\n        return this;\r\n    }\r\n    /**\r\n     * Starts trying to reconnect if reconnection is enabled and we have not\r\n     * started reconnecting yet\r\n     *\r\n     * @private\r\n     */\r\n    maybeReconnectOnOpen() {\r\n        // Only try to reconnect if it's the first time we're connecting\r\n        if (!this._reconnecting &&\r\n            this._reconnection &&\r\n            this.backoff.attempts === 0) {\r\n            // keeps reconnection from firing twice for the same reconnection loop\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Sets the current transport `socket`.\r\n     *\r\n     * @param {Function} fn - optional, callback\r\n     * @return self\r\n     * @public\r\n     */\r\n    open(fn) {\r\n        debug(\"readyState %s\", this._readyState);\r\n        if (~this._readyState.indexOf(\"open\"))\r\n            return this;\r\n        debug(\"opening %s\", this.uri);\r\n        this.engine = eio(this.uri, this.opts);\r\n        const socket = this.engine;\r\n        const self = this;\r\n        this._readyState = \"opening\";\r\n        this.skipReconnect = false;\r\n        // emit `open`\r\n        const openSub = on_1.on(socket, \"open\", function () {\r\n            self.onopen();\r\n            fn && fn();\r\n        });\r\n        // emit `error`\r\n        const errorSub = on_1.on(socket, \"error\", (err) => {\r\n            debug(\"error\");\r\n            self.cleanup();\r\n            self._readyState = \"closed\";\r\n            super.emit(\"error\", err);\r\n            if (fn) {\r\n                fn(err);\r\n            }\r\n            else {\r\n                // Only do this if there is no fn to handle the error\r\n                self.maybeReconnectOnOpen();\r\n            }\r\n        });\r\n        if (false !== this._timeout) {\r\n            const timeout = this._timeout;\r\n            debug(\"connect attempt will timeout after %d\", timeout);\r\n            if (timeout === 0) {\r\n                openSub.destroy(); // prevents a race condition with the 'open' event\r\n            }\r\n            // set timer\r\n            const timer = setTimeout(() => {\r\n                debug(\"connect attempt timed out after %d\", timeout);\r\n                openSub.destroy();\r\n                socket.close();\r\n                socket.emit(\"error\", new Error(\"timeout\"));\r\n            }, timeout);\r\n            this.subs.push({\r\n                destroy: function () {\r\n                    clearTimeout(timer);\r\n                },\r\n            });\r\n        }\r\n        this.subs.push(openSub);\r\n        this.subs.push(errorSub);\r\n        return this;\r\n    }\r\n    /**\r\n     * Alias for open()\r\n     *\r\n     * @return {Manager} self\r\n     * @public\r\n     */\r\n    connect(fn) {\r\n        return this.open(fn);\r\n    }\r\n    /**\r\n     * Called upon transport open.\r\n     *\r\n     * @private\r\n     */\r\n    onopen() {\r\n        debug(\"open\");\r\n        // clear old subs\r\n        this.cleanup();\r\n        // mark as open\r\n        this._readyState = \"open\";\r\n        super.emit(\"open\");\r\n        // add new subs\r\n        const socket = this.engine;\r\n        this.subs.push(on_1.on(socket, \"data\", bind(this, \"ondata\")), on_1.on(socket, \"ping\", bind(this, \"onping\")), on_1.on(socket, \"error\", bind(this, \"onerror\")), on_1.on(socket, \"close\", bind(this, \"onclose\")), on_1.on(this.decoder, \"decoded\", bind(this, \"ondecoded\")));\r\n    }\r\n    /**\r\n     * Called upon a ping.\r\n     *\r\n     * @private\r\n     */\r\n    onping() {\r\n        super.emit(\"ping\");\r\n    }\r\n    /**\r\n     * Called with data.\r\n     *\r\n     * @private\r\n     */\r\n    ondata(data) {\r\n        this.decoder.add(data);\r\n    }\r\n    /**\r\n     * Called when parser fully decodes a packet.\r\n     *\r\n     * @private\r\n     */\r\n    ondecoded(packet) {\r\n        super.emit(\"packet\", packet);\r\n    }\r\n    /**\r\n     * Called upon socket error.\r\n     *\r\n     * @private\r\n     */\r\n    onerror(err) {\r\n        debug(\"error\", err);\r\n        super.emit(\"error\", err);\r\n    }\r\n    /**\r\n     * Creates a new socket for the given `nsp`.\r\n     *\r\n     * @return {Socket}\r\n     * @public\r\n     */\r\n    socket(nsp, opts) {\r\n        let socket = this.nsps[nsp];\r\n        if (!socket) {\r\n            socket = new socket_1.Socket(this, nsp, opts);\r\n            this.nsps[nsp] = socket;\r\n        }\r\n        return socket;\r\n    }\r\n    /**\r\n     * Called upon a socket close.\r\n     *\r\n     * @param socket\r\n     * @private\r\n     */\r\n    _destroy(socket) {\r\n        const nsps = Object.keys(this.nsps);\r\n        for (const nsp of nsps) {\r\n            const socket = this.nsps[nsp];\r\n            if (socket.active) {\r\n                debug(\"socket %s is still active, skipping close\", nsp);\r\n                return;\r\n            }\r\n        }\r\n        this._close();\r\n    }\r\n    /**\r\n     * Writes a packet.\r\n     *\r\n     * @param packet\r\n     * @private\r\n     */\r\n    _packet(packet) {\r\n        debug(\"writing packet %j\", packet);\r\n        if (packet.query && packet.type === 0)\r\n            packet.nsp += \"?\" + packet.query;\r\n        const encodedPackets = this.encoder.encode(packet);\r\n        for (let i = 0; i < encodedPackets.length; i++) {\r\n            this.engine.write(encodedPackets[i], packet.options);\r\n        }\r\n    }\r\n    /**\r\n     * Clean up transport subscriptions and packet buffer.\r\n     *\r\n     * @private\r\n     */\r\n    cleanup() {\r\n        debug(\"cleanup\");\r\n        const subsLength = this.subs.length;\r\n        for (let i = 0; i < subsLength; i++) {\r\n            const sub = this.subs.shift();\r\n            sub.destroy();\r\n        }\r\n        this.decoder.destroy();\r\n    }\r\n    /**\r\n     * Close the current socket.\r\n     *\r\n     * @private\r\n     */\r\n    _close() {\r\n        debug(\"disconnect\");\r\n        this.skipReconnect = true;\r\n        this._reconnecting = false;\r\n        if (\"opening\" === this._readyState) {\r\n            // `onclose` will not fire because\r\n            // an open event never happened\r\n            this.cleanup();\r\n        }\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        if (this.engine)\r\n            this.engine.close();\r\n    }\r\n    /**\r\n     * Alias for close()\r\n     *\r\n     * @private\r\n     */\r\n    disconnect() {\r\n        return this._close();\r\n    }\r\n    /**\r\n     * Called upon engine close.\r\n     *\r\n     * @private\r\n     */\r\n    onclose(reason) {\r\n        debug(\"onclose\");\r\n        this.cleanup();\r\n        this.backoff.reset();\r\n        this._readyState = \"closed\";\r\n        super.emit(\"close\", reason);\r\n        if (this._reconnection && !this.skipReconnect) {\r\n            this.reconnect();\r\n        }\r\n    }\r\n    /**\r\n     * Attempt a reconnection.\r\n     *\r\n     * @private\r\n     */\r\n    reconnect() {\r\n        if (this._reconnecting || this.skipReconnect)\r\n            return this;\r\n        const self = this;\r\n        if (this.backoff.attempts >= this._reconnectionAttempts) {\r\n            debug(\"reconnect failed\");\r\n            this.backoff.reset();\r\n            super.emit(\"reconnect_failed\");\r\n            this._reconnecting = false;\r\n        }\r\n        else {\r\n            const delay = this.backoff.duration();\r\n            debug(\"will wait %dms before reconnect attempt\", delay);\r\n            this._reconnecting = true;\r\n            const timer = setTimeout(() => {\r\n                if (self.skipReconnect)\r\n                    return;\r\n                debug(\"attempting reconnect\");\r\n                super.emit(\"reconnect_attempt\", self.backoff.attempts);\r\n                // check again for the case socket closed in above events\r\n                if (self.skipReconnect)\r\n                    return;\r\n                self.open((err) => {\r\n                    if (err) {\r\n                        debug(\"reconnect attempt error\");\r\n                        self._reconnecting = false;\r\n                        self.reconnect();\r\n                        super.emit(\"reconnect_error\", err);\r\n                    }\r\n                    else {\r\n                        debug(\"reconnect success\");\r\n                        self.onreconnect();\r\n                    }\r\n                });\r\n            }, delay);\r\n            this.subs.push({\r\n                destroy: function () {\r\n                    clearTimeout(timer);\r\n                },\r\n            });\r\n        }\r\n    }\r\n    /**\r\n     * Called upon successful reconnect.\r\n     *\r\n     * @private\r\n     */\r\n    onreconnect() {\r\n        const attempt = this.backoff.attempts;\r\n        this._reconnecting = false;\r\n        this.backoff.reset();\r\n        super.emit(\"reconnect\", attempt);\r\n    }\r\n}\r\nexports.Manager = Manager;\r\n"]},"metadata":{},"sourceType":"script"}