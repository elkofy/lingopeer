{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nvar _jsxFileName = \"C:\\\\Users\\\\corta_000\\\\Desktop\\\\rendus-master\\\\Front-end\\\\my-app\\\\src\\\\Chat\\\\Chat.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport authService from '../services/auth.service';\nimport './Chat.css';\nconst ENDPOINT = 'localhost:8081';\nlet socket;\n\nconst Chat = () => {\n  _s();\n\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n  useEffect(() => {\n    socket.on('join', ({\n      name,\n      room\n    }, callback) => {\n      //listener pour rejoindre une salle, ajoute l'utilisateur à une room grace à son nom\n      const {\n        error,\n        user\n      } = addUser({\n        id: socket.id,\n        name,\n        room\n      });\n      if (error) return callback(error);\n      socket.join(user.room); //l'utilisateur user rejoins la room room\n\n      socket.emit('message', {\n        user: '',\n        text: `${user.name}, welcome to the ${user.room} room!`\n      }); //message envoyé à l'utilisateur lors de sa connexion\n\n      socket.broadcast.to(user.room).emit('message', {\n        user: '',\n        text: `${user.name} has joined!`\n      }); //message envoyé à tous les utilisateurs sauf celui qui rejoins\n\n      io.to(user.room).emit('roomData', {\n        room: user.room,\n        users: getUsersInRoom(user.room)\n      });\n      callback();\n    });\n    socket.on('sendMessage', (message, callback) => {\n      //listener de l'envoi de message\n      const user = getUser(socket.id); //recupère l'utilisateur qui envoie le message\n\n      io.to(user.room).emit('message', {\n        user: user.name,\n        text: message\n      }); //envoi le message de l'utilisateur user \n\n      callback();\n    });\n    socket.on('disconnect', () => {\n      //listener de déconnexion\n      const user = removeUser(socket.id); //l'utilisateur user est supprimé de la salle\n\n      if (user) {\n        io.to(user.room).emit('message', {\n          user: '',\n          text: `${user.name} has left.`\n        }); //message envoyé dans la salle lors de la déconnexion\n\n        io.to(user.room).emit('roomData', {\n          room: user.room,\n          users: getUsersInRoom(user.room)\n        }); //met à jour les utilisateurs dans la salle\n      }\n    });\n    socket = io(ENDPOINT);\n    setRoom(\"Test Room\");\n    setName(authService.getCurrentUser().username);\n    socket.emit('join', {\n      name,\n      room\n    }, error => {\n      if (error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT]);\n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [...messages, message]);\n    });\n    socket.on(\"roomData\", ({\n      users\n    }) => {\n      setUsers(users);\n    });\n  }, []);\n\n  const sendMessage = event => {\n    event.preventDefault();\n\n    if (message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  };\n\n  console.log(name);\n  console.log(users);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"outerContainer\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      children: [/*#__PURE__*/_jsxDEV(InfoBar, {\n        room: room\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Messages, {\n        messages: messages,\n        name: name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Input, {\n        message: message,\n        setMessage: setMessage,\n        sendMessage: sendMessage\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 91,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(TextContainer, {\n      users: users\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 90,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Chat, \"NKZGbzfWHlS0Y+OfA88k1uWyNPI=\");\n\n_c = Chat;\nexport default Chat;\n\nvar _c;\n\n$RefreshReg$(_c, \"Chat\");","map":{"version":3,"sources":["C:/Users/corta_000/Desktop/rendus-master/Front-end/my-app/src/Chat/Chat.js"],"names":["React","useState","useEffect","io","TextContainer","Messages","InfoBar","Input","authService","ENDPOINT","socket","Chat","name","setName","room","setRoom","users","setUsers","message","setMessage","messages","setMessages","on","callback","error","user","addUser","id","join","emit","text","broadcast","to","getUsersInRoom","getUser","removeUser","getCurrentUser","username","alert","sendMessage","event","preventDefault","console","log"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport io from \"socket.io-client\";\n\nimport TextContainer from '../TextContainer/TextContainer';\nimport Messages from '../Messages/Messages';\nimport InfoBar from '../InfoBar/InfoBar';\nimport Input from '../Input/Input';\nimport authService from '../services/auth.service';\n\nimport './Chat.css';\n\nconst ENDPOINT = 'localhost:8081';\n\nlet socket;\n\nconst Chat = () => {\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState('');\n  const [users, setUsers] = useState('');\n  const [message, setMessage] = useState('');\n  const [messages, setMessages] = useState([]);\n\n  useEffect(() => {\n    socket.on('join', ({ name, room }, callback) => {\n    //listener pour rejoindre une salle, ajoute l'utilisateur à une room grace à son nom\n    const { error, user } = addUser({ id: socket.id, name, room });\n\n    if(error) return callback(error);\n\n    socket.join(user.room); //l'utilisateur user rejoins la room room\n\n    socket.emit('message', { user: '', text: `${user.name}, welcome to the ${user.room} room!`});    //message envoyé à l'utilisateur lors de sa connexion\n    socket.broadcast.to(user.room).emit('message', { user: '', text: `${user.name} has joined!` });  //message envoyé à tous les utilisateurs sauf celui qui rejoins\n\n    io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room) });\n\n    callback();\n  });\n\n  socket.on('sendMessage', (message, callback) => {\n    //listener de l'envoi de message\n    const user = getUser(socket.id); //recupère l'utilisateur qui envoie le message\n\n    io.to(user.room).emit('message', { user: user.name, text: message }); //envoi le message de l'utilisateur user \n    callback();\n  });\n\n  socket.on('disconnect', () => {\n    //listener de déconnexion\n    const user = removeUser(socket.id); //l'utilisateur user est supprimé de la salle\n\n    if(user) {\n      io.to(user.room).emit('message', { user: '', text: `${user.name} has left.` }); //message envoyé dans la salle lors de la déconnexion\n      io.to(user.room).emit('roomData', { room: user.room, users: getUsersInRoom(user.room)}); //met à jour les utilisateurs dans la salle\n    }\n  });\n\n    socket = io(ENDPOINT);\n    setRoom(\"Test Room\");\n    setName(authService.getCurrentUser().username);\n\n    socket.emit('join', { name, room }, (error) => {\n      if(error) {\n        alert(error);\n      }\n    });\n  }, [ENDPOINT]);\n  \n  \n  useEffect(() => {\n    socket.on('message', message => {\n      setMessages(messages => [ ...messages, message ]);\n    });\n    \n    socket.on(\"roomData\", ({ users }) => {\n      setUsers(users);\n    });\n}, []);\n\n  const sendMessage = (event) => {\n    event.preventDefault();\n\n    if(message) {\n      socket.emit('sendMessage', message, () => setMessage(''));\n    }\n  }\n  console.log(name);\n  console.log(users);\n  return (\n    <div className=\"outerContainer\">\n      <div className=\"container\">\n          <InfoBar room={room} />\n          <Messages messages={messages} name={name} />\n          <Input message={message} setMessage={setMessage} sendMessage={sendMessage} />\n      </div>\n      <TextContainer users={users}/>\n    </div>\n  );\n}\n\nexport default Chat;\n"]},"metadata":{},"sourceType":"module"}