{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/nassi/deploy/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/nassi/deploy/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/nassi/deploy/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/nassi/deploy/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar Transport = require(\"../transport\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar parseqs = require(\"parseqs\");\n\nvar yeast = require(\"yeast\");\n\nvar _require = require(\"../util\"),\n    pick = _require.pick;\n\nvar _require2 = require(\"./websocket-constructor\"),\n    WebSocket = _require2.WebSocket,\n    usingBrowserWebSocket = _require2.usingBrowserWebSocket,\n    defaultBinaryType = _require2.defaultBinaryType;\n\nvar debug = require(\"debug\")(\"engine.io-client:websocket\"); // detect ReactNative environment\n\n\nvar isReactNative = typeof navigator !== \"undefined\" && typeof navigator.product === \"string\" && navigator.product.toLowerCase() === \"reactnative\";\n\nvar WS = /*#__PURE__*/function (_Transport) {\n  \"use strict\";\n\n  _inherits(WS, _Transport);\n\n  var _super = _createSuper(WS);\n\n  /**\r\n   * WebSocket transport constructor.\r\n   *\r\n   * @api {Object} connection options\r\n   * @api public\r\n   */\n  function WS(opts) {\n    var _this;\n\n    _classCallCheck(this, WS);\n\n    _this = _super.call(this, opts);\n    _this.supportsBinary = !opts.forceBase64;\n    return _this;\n  }\n  /**\r\n   * Transport name.\r\n   *\r\n   * @api public\r\n   */\n\n\n  _createClass(WS, [{\n    key: \"doOpen\",\n\n    /**\r\n     * Opens socket.\r\n     *\r\n     * @api private\r\n     */\n    value: function doOpen() {\n      if (!this.check()) {\n        // let probe timeout\n        return;\n      }\n\n      var uri = this.uri();\n      var protocols = this.opts.protocols; // React Native only supports the 'headers' option, and will print a warning if anything else is passed\n\n      var opts = isReactNative ? {} : pick(this.opts, \"agent\", \"perMessageDeflate\", \"pfx\", \"key\", \"passphrase\", \"cert\", \"ca\", \"ciphers\", \"rejectUnauthorized\", \"localAddress\");\n\n      if (this.opts.extraHeaders) {\n        opts.headers = this.opts.extraHeaders;\n      }\n\n      try {\n        this.ws = usingBrowserWebSocket && !isReactNative ? protocols ? new WebSocket(uri, protocols) : new WebSocket(uri) : new WebSocket(uri, protocols, opts);\n      } catch (err) {\n        return this.emit(\"error\", err);\n      }\n\n      this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\n      this.addEventListeners();\n    }\n    /**\r\n     * Adds event listeners to the socket\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"addEventListeners\",\n    value: function addEventListeners() {\n      var self = this;\n\n      this.ws.onopen = function () {\n        self.onOpen();\n      };\n\n      this.ws.onclose = function () {\n        self.onClose();\n      };\n\n      this.ws.onmessage = function (ev) {\n        self.onData(ev.data);\n      };\n\n      this.ws.onerror = function (e) {\n        self.onError(\"websocket error\", e);\n      };\n    }\n    /**\r\n     * Writes data to socket.\r\n     *\r\n     * @param {Array} array of packets.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(packets) {\n      var self = this;\n      this.writable = false; // encodePacket efficient as it uses WS framing\n      // no need for encodePayload\n\n      var total = packets.length;\n      var i = 0;\n      var l = total;\n\n      for (; i < l; i++) {\n        (function (packet) {\n          parser.encodePacket(packet, self.supportsBinary, function (data) {\n            // always create a new object (GH-437)\n            var opts = {};\n\n            if (!usingBrowserWebSocket) {\n              if (packet.options) {\n                opts.compress = packet.options.compress;\n              }\n\n              if (self.opts.perMessageDeflate) {\n                var len = \"string\" === typeof data ? Buffer.byteLength(data) : data.length;\n\n                if (len < self.opts.perMessageDeflate.threshold) {\n                  opts.compress = false;\n                }\n              }\n            } // Sometimes the websocket has already been closed but the browser didn't\n            // have a chance of informing us about it yet, in that case send will\n            // throw an error\n\n\n            try {\n              if (usingBrowserWebSocket) {\n                // TypeError is thrown when passing the second argument on Safari\n                self.ws.send(data);\n              } else {\n                self.ws.send(data, opts);\n              }\n            } catch (e) {\n              debug(\"websocket closed before onclose event\");\n            }\n\n            --total || done();\n          });\n        })(packets[i]);\n      }\n\n      function done() {\n        self.emit(\"flush\"); // fake drain\n        // defer to next tick to allow Socket to clear writeBuffer\n\n        setTimeout(function () {\n          self.writable = true;\n          self.emit(\"drain\");\n        }, 0);\n      }\n    }\n    /**\r\n     * Called upon close\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose() {\n      Transport.prototype.onClose.call(this);\n    }\n    /**\r\n     * Closes socket.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"doClose\",\n    value: function doClose() {\n      if (typeof this.ws !== \"undefined\") {\n        this.ws.close();\n      }\n    }\n    /**\r\n     * Generates uri for connection.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"uri\",\n    value: function uri() {\n      var query = this.query || {};\n      var schema = this.opts.secure ? \"wss\" : \"ws\";\n      var port = \"\"; // avoid port if default for schema\n\n      if (this.opts.port && (\"wss\" === schema && Number(this.opts.port) !== 443 || \"ws\" === schema && Number(this.opts.port) !== 80)) {\n        port = \":\" + this.opts.port;\n      } // append timestamp to URI\n\n\n      if (this.opts.timestampRequests) {\n        query[this.opts.timestampParam] = yeast();\n      } // communicate binary support capabilities\n\n\n      if (!this.supportsBinary) {\n        query.b64 = 1;\n      }\n\n      query = parseqs.encode(query); // prepend ? to query\n\n      if (query.length) {\n        query = \"?\" + query;\n      }\n\n      var ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\n      return schema + \"://\" + (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) + port + this.opts.path + query;\n    }\n    /**\r\n     * Feature detection for WebSocket.\r\n     *\r\n     * @return {Boolean} whether this transport is available.\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"check\",\n    value: function check() {\n      return !!WebSocket && !(\"__initialize\" in WebSocket && this.name === WS.prototype.name);\n    }\n  }, {\n    key: \"name\",\n    get: function get() {\n      return \"websocket\";\n    }\n  }]);\n\n  return WS;\n}(Transport);\n\nmodule.exports = WS;","map":{"version":3,"sources":["C:/Users/nassi/deploy/rendus/Front-end/my-app/node_modules/engine.io-client/lib/transports/websocket.js"],"names":["Transport","require","parser","parseqs","yeast","pick","WebSocket","usingBrowserWebSocket","defaultBinaryType","debug","isReactNative","navigator","product","toLowerCase","WS","opts","supportsBinary","forceBase64","check","uri","protocols","extraHeaders","headers","ws","err","emit","binaryType","socket","addEventListeners","self","onopen","onOpen","onclose","onClose","onmessage","ev","onData","data","onerror","e","onError","packets","writable","total","length","i","l","packet","encodePacket","options","compress","perMessageDeflate","len","Buffer","byteLength","threshold","send","done","setTimeout","prototype","call","close","query","schema","secure","port","Number","timestampRequests","timestampParam","b64","encode","ipv6","hostname","indexOf","path","name","module","exports"],"mappings":"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","sourcesContent":["const Transport = require(\"../transport\");\r\nconst parser = require(\"engine.io-parser\");\r\nconst parseqs = require(\"parseqs\");\r\nconst yeast = require(\"yeast\");\r\nconst { pick } = require(\"../util\");\r\nconst {\r\n  WebSocket,\r\n  usingBrowserWebSocket,\r\n  defaultBinaryType\r\n} = require(\"./websocket-constructor\");\r\n\r\nconst debug = require(\"debug\")(\"engine.io-client:websocket\");\r\n\r\n// detect ReactNative environment\r\nconst isReactNative =\r\n  typeof navigator !== \"undefined\" &&\r\n  typeof navigator.product === \"string\" &&\r\n  navigator.product.toLowerCase() === \"reactnative\";\r\n\r\nclass WS extends Transport {\r\n  /**\r\n   * WebSocket transport constructor.\r\n   *\r\n   * @api {Object} connection options\r\n   * @api public\r\n   */\r\n  constructor(opts) {\r\n    super(opts);\r\n\r\n    this.supportsBinary = !opts.forceBase64;\r\n  }\r\n\r\n  /**\r\n   * Transport name.\r\n   *\r\n   * @api public\r\n   */\r\n  get name() {\r\n    return \"websocket\";\r\n  }\r\n\r\n  /**\r\n   * Opens socket.\r\n   *\r\n   * @api private\r\n   */\r\n  doOpen() {\r\n    if (!this.check()) {\r\n      // let probe timeout\r\n      return;\r\n    }\r\n\r\n    const uri = this.uri();\r\n    const protocols = this.opts.protocols;\r\n\r\n    // React Native only supports the 'headers' option, and will print a warning if anything else is passed\r\n    const opts = isReactNative\r\n      ? {}\r\n      : pick(\r\n          this.opts,\r\n          \"agent\",\r\n          \"perMessageDeflate\",\r\n          \"pfx\",\r\n          \"key\",\r\n          \"passphrase\",\r\n          \"cert\",\r\n          \"ca\",\r\n          \"ciphers\",\r\n          \"rejectUnauthorized\",\r\n          \"localAddress\"\r\n        );\r\n\r\n    if (this.opts.extraHeaders) {\r\n      opts.headers = this.opts.extraHeaders;\r\n    }\r\n\r\n    try {\r\n      this.ws =\r\n        usingBrowserWebSocket && !isReactNative\r\n          ? protocols\r\n            ? new WebSocket(uri, protocols)\r\n            : new WebSocket(uri)\r\n          : new WebSocket(uri, protocols, opts);\r\n    } catch (err) {\r\n      return this.emit(\"error\", err);\r\n    }\r\n\r\n    this.ws.binaryType = this.socket.binaryType || defaultBinaryType;\r\n\r\n    this.addEventListeners();\r\n  }\r\n\r\n  /**\r\n   * Adds event listeners to the socket\r\n   *\r\n   * @api private\r\n   */\r\n  addEventListeners() {\r\n    const self = this;\r\n\r\n    this.ws.onopen = function() {\r\n      self.onOpen();\r\n    };\r\n    this.ws.onclose = function() {\r\n      self.onClose();\r\n    };\r\n    this.ws.onmessage = function(ev) {\r\n      self.onData(ev.data);\r\n    };\r\n    this.ws.onerror = function(e) {\r\n      self.onError(\"websocket error\", e);\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Writes data to socket.\r\n   *\r\n   * @param {Array} array of packets.\r\n   * @api private\r\n   */\r\n  write(packets) {\r\n    const self = this;\r\n    this.writable = false;\r\n\r\n    // encodePacket efficient as it uses WS framing\r\n    // no need for encodePayload\r\n    let total = packets.length;\r\n    let i = 0;\r\n    const l = total;\r\n    for (; i < l; i++) {\r\n      (function(packet) {\r\n        parser.encodePacket(packet, self.supportsBinary, function(data) {\r\n          // always create a new object (GH-437)\r\n          const opts = {};\r\n          if (!usingBrowserWebSocket) {\r\n            if (packet.options) {\r\n              opts.compress = packet.options.compress;\r\n            }\r\n\r\n            if (self.opts.perMessageDeflate) {\r\n              const len =\r\n                \"string\" === typeof data\r\n                  ? Buffer.byteLength(data)\r\n                  : data.length;\r\n              if (len < self.opts.perMessageDeflate.threshold) {\r\n                opts.compress = false;\r\n              }\r\n            }\r\n          }\r\n\r\n          // Sometimes the websocket has already been closed but the browser didn't\r\n          // have a chance of informing us about it yet, in that case send will\r\n          // throw an error\r\n          try {\r\n            if (usingBrowserWebSocket) {\r\n              // TypeError is thrown when passing the second argument on Safari\r\n              self.ws.send(data);\r\n            } else {\r\n              self.ws.send(data, opts);\r\n            }\r\n          } catch (e) {\r\n            debug(\"websocket closed before onclose event\");\r\n          }\r\n\r\n          --total || done();\r\n        });\r\n      })(packets[i]);\r\n    }\r\n\r\n    function done() {\r\n      self.emit(\"flush\");\r\n\r\n      // fake drain\r\n      // defer to next tick to allow Socket to clear writeBuffer\r\n      setTimeout(function() {\r\n        self.writable = true;\r\n        self.emit(\"drain\");\r\n      }, 0);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon close\r\n   *\r\n   * @api private\r\n   */\r\n  onClose() {\r\n    Transport.prototype.onClose.call(this);\r\n  }\r\n\r\n  /**\r\n   * Closes socket.\r\n   *\r\n   * @api private\r\n   */\r\n  doClose() {\r\n    if (typeof this.ws !== \"undefined\") {\r\n      this.ws.close();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Generates uri for connection.\r\n   *\r\n   * @api private\r\n   */\r\n  uri() {\r\n    let query = this.query || {};\r\n    const schema = this.opts.secure ? \"wss\" : \"ws\";\r\n    let port = \"\";\r\n\r\n    // avoid port if default for schema\r\n    if (\r\n      this.opts.port &&\r\n      ((\"wss\" === schema && Number(this.opts.port) !== 443) ||\r\n        (\"ws\" === schema && Number(this.opts.port) !== 80))\r\n    ) {\r\n      port = \":\" + this.opts.port;\r\n    }\r\n\r\n    // append timestamp to URI\r\n    if (this.opts.timestampRequests) {\r\n      query[this.opts.timestampParam] = yeast();\r\n    }\r\n\r\n    // communicate binary support capabilities\r\n    if (!this.supportsBinary) {\r\n      query.b64 = 1;\r\n    }\r\n\r\n    query = parseqs.encode(query);\r\n\r\n    // prepend ? to query\r\n    if (query.length) {\r\n      query = \"?\" + query;\r\n    }\r\n\r\n    const ipv6 = this.opts.hostname.indexOf(\":\") !== -1;\r\n    return (\r\n      schema +\r\n      \"://\" +\r\n      (ipv6 ? \"[\" + this.opts.hostname + \"]\" : this.opts.hostname) +\r\n      port +\r\n      this.opts.path +\r\n      query\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Feature detection for WebSocket.\r\n   *\r\n   * @return {Boolean} whether this transport is available.\r\n   * @api public\r\n   */\r\n  check() {\r\n    return (\r\n      !!WebSocket &&\r\n      !(\"__initialize\" in WebSocket && this.name === WS.prototype.name)\r\n    );\r\n  }\r\n}\r\n\r\nmodule.exports = WS;\r\n"]},"metadata":{},"sourceType":"script"}