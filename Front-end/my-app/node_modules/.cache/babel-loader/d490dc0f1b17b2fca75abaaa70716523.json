{"ast":null,"code":"const express = require('express');\n\nconst bodyParser = require('body-parser');\n\nconst path = require('path');\n\nconst app = express();\n\nconst http = require(\"http\");\n\nconst server = http.createServer(app);\n\nconst socket = require(\"socket.io\");\n\nconst io = socket(server); //\n\nserver.use(express.static(path.join(__dirname, 'build')));\nserver.get('/ping', function (req, res) {\n  return res.send('pong');\n});\nserver.get('/', function (req, res) {\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\n}); //\n// Video\n\nconst users = {};\nio.on('connection', socket => {\n  if (!users[socket.id]) {\n    users[socket.id] = socket.id;\n  }\n\n  socket.emit(\"yourID\", socket.id);\n  io.sockets.emit(\"allUsers\", users);\n  socket.on('disconnect', () => {\n    delete users[socket.id];\n  });\n  socket.on(\"callUser\", data => {\n    io.to(data.userToCall).emit('hey', {\n      signal: data.signalData,\n      from: data.from\n    });\n  });\n  socket.on(\"acceptCall\", data => {\n    io.to(data.to).emit('callAccepted', data.signal);\n  });\n}); // fin Video\n\nserver.listen(process.env.PORT || 8080);","map":{"version":3,"sources":["C:/Users/nassi/rendus3/rendus/REACT-APP/my-app/server.js"],"names":["express","require","bodyParser","path","app","http","server","createServer","socket","io","use","static","join","__dirname","get","req","res","send","sendFile","users","on","id","emit","sockets","data","to","userToCall","signal","signalData","from","listen","process","env","PORT"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,SAAD,CAAvB;;AACA,MAAMC,UAAU,GAAGD,OAAO,CAAC,aAAD,CAA1B;;AACA,MAAME,IAAI,GAAGF,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMG,GAAG,GAAGJ,OAAO,EAAnB;;AACA,MAAMK,IAAI,GAAGJ,OAAO,CAAC,MAAD,CAApB;;AACA,MAAMK,MAAM,GAAGD,IAAI,CAACE,YAAL,CAAkBH,GAAlB,CAAf;;AACA,MAAMI,MAAM,GAAGP,OAAO,CAAC,WAAD,CAAtB;;AACA,MAAMQ,EAAE,GAAGD,MAAM,CAACF,MAAD,CAAjB,C,CAEA;;AACAA,MAAM,CAACI,GAAP,CAAWV,OAAO,CAACW,MAAR,CAAeR,IAAI,CAACS,IAAL,CAAUC,SAAV,EAAqB,OAArB,CAAf,CAAX;AAEAP,MAAM,CAACQ,GAAP,CAAW,OAAX,EAAoB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AACvC,SAAOA,GAAG,CAACC,IAAJ,CAAS,MAAT,CAAP;AACA,CAFD;AAIAX,MAAM,CAACQ,GAAP,CAAW,GAAX,EAAgB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAClCA,EAAAA,GAAG,CAACE,QAAJ,CAAaf,IAAI,CAACS,IAAL,CAAUC,SAAV,EAAqB,OAArB,EAA8B,YAA9B,CAAb;AACD,CAFD,E,CAGA;AAEA;;AACA,MAAMM,KAAK,GAAG,EAAd;AAEAV,EAAE,CAACW,EAAH,CAAM,YAAN,EAAoBZ,MAAM,IAAI;AAC1B,MAAI,CAACW,KAAK,CAACX,MAAM,CAACa,EAAR,CAAV,EAAuB;AACnBF,IAAAA,KAAK,CAACX,MAAM,CAACa,EAAR,CAAL,GAAmBb,MAAM,CAACa,EAA1B;AACH;;AACDb,EAAAA,MAAM,CAACc,IAAP,CAAY,QAAZ,EAAsBd,MAAM,CAACa,EAA7B;AACAZ,EAAAA,EAAE,CAACc,OAAH,CAAWD,IAAX,CAAgB,UAAhB,EAA4BH,KAA5B;AACAX,EAAAA,MAAM,CAACY,EAAP,CAAU,YAAV,EAAwB,MAAM;AAC1B,WAAOD,KAAK,CAACX,MAAM,CAACa,EAAR,CAAZ;AACH,GAFD;AAIAb,EAAAA,MAAM,CAACY,EAAP,CAAU,UAAV,EAAuBI,IAAD,IAAU;AAC5Bf,IAAAA,EAAE,CAACgB,EAAH,CAAMD,IAAI,CAACE,UAAX,EAAuBJ,IAAvB,CAA4B,KAA5B,EAAmC;AAACK,MAAAA,MAAM,EAAEH,IAAI,CAACI,UAAd;AAA0BC,MAAAA,IAAI,EAAEL,IAAI,CAACK;AAArC,KAAnC;AACH,GAFD;AAIArB,EAAAA,MAAM,CAACY,EAAP,CAAU,YAAV,EAAyBI,IAAD,IAAU;AAC9Bf,IAAAA,EAAE,CAACgB,EAAH,CAAMD,IAAI,CAACC,EAAX,EAAeH,IAAf,CAAoB,cAApB,EAAoCE,IAAI,CAACG,MAAzC;AACH,GAFD;AAGH,CAjBD,E,CAkBA;;AAEArB,MAAM,CAACwB,MAAP,CAAcC,OAAO,CAACC,GAAR,CAAYC,IAAZ,IAAoB,IAAlC","sourcesContent":["const express = require('express');\r\nconst bodyParser = require('body-parser')\r\nconst path = require('path');\r\nconst app = express();\r\nconst http = require(\"http\");\r\nconst server = http.createServer(app);\r\nconst socket = require(\"socket.io\");\r\nconst io = socket(server);\r\n\r\n//\r\nserver.use(express.static(path.join(__dirname, 'build')));\r\n\r\nserver.get('/ping', function (req, res) {\r\n return res.send('pong');\r\n});\r\n\r\nserver.get('/', function (req, res) {\r\n  res.sendFile(path.join(__dirname, 'build', 'index.html'));\r\n});\r\n//\r\n\r\n// Video\r\nconst users = {};\r\n\r\nio.on('connection', socket => {\r\n    if (!users[socket.id]) {\r\n        users[socket.id] = socket.id;\r\n    }\r\n    socket.emit(\"yourID\", socket.id);\r\n    io.sockets.emit(\"allUsers\", users);\r\n    socket.on('disconnect', () => {\r\n        delete users[socket.id];\r\n    })\r\n\r\n    socket.on(\"callUser\", (data) => {\r\n        io.to(data.userToCall).emit('hey', {signal: data.signalData, from: data.from});\r\n    })\r\n\r\n    socket.on(\"acceptCall\", (data) => {\r\n        io.to(data.to).emit('callAccepted', data.signal);\r\n    })\r\n});\r\n// fin Video\r\n\r\nserver.listen(process.env.PORT || 8080);"]},"metadata":{},"sourceType":"script"}