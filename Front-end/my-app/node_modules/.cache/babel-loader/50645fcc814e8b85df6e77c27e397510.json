{"ast":null,"code":"var _classCallCheck = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _inherits = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _createSuper = require(\"C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createSuper\");\n\nvar transports = require(\"./transports/index\");\n\nvar Emitter = require(\"component-emitter\");\n\nvar debug = require(\"debug\")(\"engine.io-client:socket\");\n\nvar parser = require(\"engine.io-parser\");\n\nvar parseuri = require(\"parseuri\");\n\nvar parseqs = require(\"parseqs\");\n\nvar Socket = /*#__PURE__*/function (_Emitter) {\n  \"use strict\";\n\n  _inherits(Socket, _Emitter);\n\n  var _super = _createSuper(Socket);\n\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\n  function Socket(uri) {\n    var _this;\n\n    var opts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Socket);\n\n    _this = _super.call(this);\n\n    if (uri && \"object\" === typeof uri) {\n      opts = uri;\n      uri = null;\n    }\n\n    if (uri) {\n      uri = parseuri(uri);\n      opts.hostname = uri.host;\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\n      opts.port = uri.port;\n      if (uri.query) opts.query = uri.query;\n    } else if (opts.host) {\n      opts.hostname = parseuri(opts.host).host;\n    }\n\n    _this.secure = null != opts.secure ? opts.secure : typeof location !== \"undefined\" && \"https:\" === location.protocol;\n\n    if (opts.hostname && !opts.port) {\n      // if no port is specified manually, use the protocol default\n      opts.port = _this.secure ? \"443\" : \"80\";\n    }\n\n    _this.hostname = opts.hostname || (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\n    _this.port = opts.port || (typeof location !== \"undefined\" && location.port ? location.port : _this.secure ? 443 : 80);\n    _this.transports = opts.transports || [\"polling\", \"websocket\"];\n    _this.readyState = \"\";\n    _this.writeBuffer = [];\n    _this.prevBufferLen = 0;\n    _this.opts = Object.assign({\n      path: \"/engine.io\",\n      agent: false,\n      withCredentials: false,\n      upgrade: true,\n      jsonp: true,\n      timestampParam: \"t\",\n      rememberUpgrade: false,\n      rejectUnauthorized: true,\n      perMessageDeflate: {\n        threshold: 1024\n      },\n      transportOptions: {}\n    }, opts);\n    _this.opts.path = _this.opts.path.replace(/\\/$/, \"\") + \"/\";\n\n    if (typeof _this.opts.query === \"string\") {\n      _this.opts.query = parseqs.decode(_this.opts.query);\n    } // set on handshake\n\n\n    _this.id = null;\n    _this.upgrades = null;\n    _this.pingInterval = null;\n    _this.pingTimeout = null; // set on heartbeat\n\n    _this.pingTimeoutTimer = null;\n\n    _this.open();\n\n    return _this;\n  }\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\n\n\n  _createClass(Socket, [{\n    key: \"createTransport\",\n    value: function createTransport(name) {\n      debug('creating transport \"%s\"', name);\n      var query = clone(this.opts.query); // append engine.io protocol identifier\n\n      query.EIO = parser.protocol; // transport name\n\n      query.transport = name; // session id if we already have one\n\n      if (this.id) query.sid = this.id;\n      var opts = Object.assign({}, this.opts.transportOptions[name], this.opts, {\n        query: query,\n        socket: this,\n        hostname: this.hostname,\n        secure: this.secure,\n        port: this.port\n      });\n      debug(\"options: %j\", opts);\n      return new transports[name](opts);\n    }\n    /**\r\n     * Initializes transport to use and starts probe.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"open\",\n    value: function open() {\n      var transport;\n\n      if (this.opts.rememberUpgrade && Socket.priorWebsocketSuccess && this.transports.indexOf(\"websocket\") !== -1) {\n        transport = \"websocket\";\n      } else if (0 === this.transports.length) {\n        // Emit error on next tick so it can be listened to\n        var self = this;\n        setTimeout(function () {\n          self.emit(\"error\", \"No transports available\");\n        }, 0);\n        return;\n      } else {\n        transport = this.transports[0];\n      }\n\n      this.readyState = \"opening\"; // Retry with the next transport if the transport is disabled (jsonp: false)\n\n      try {\n        transport = this.createTransport(transport);\n      } catch (e) {\n        debug(\"error while creating transport: %s\", e);\n        this.transports.shift();\n        this.open();\n        return;\n      }\n\n      transport.open();\n      this.setTransport(transport);\n    }\n    /**\r\n     * Sets the current transport. Disables the existing one (if any).\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"setTransport\",\n    value: function setTransport(transport) {\n      debug(\"setting transport %s\", transport.name);\n      var self = this;\n\n      if (this.transport) {\n        debug(\"clearing existing transport %s\", this.transport.name);\n        this.transport.removeAllListeners();\n      } // set up transport\n\n\n      this.transport = transport; // set up transport listeners\n\n      transport.on(\"drain\", function () {\n        self.onDrain();\n      }).on(\"packet\", function (packet) {\n        self.onPacket(packet);\n      }).on(\"error\", function (e) {\n        self.onError(e);\n      }).on(\"close\", function () {\n        self.onClose(\"transport close\");\n      });\n    }\n    /**\r\n     * Probes a transport.\r\n     *\r\n     * @param {String} transport name\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"probe\",\n    value: function probe(name) {\n      debug('probing transport \"%s\"', name);\n      var transport = this.createTransport(name, {\n        probe: 1\n      });\n      var failed = false;\n      var self = this;\n      Socket.priorWebsocketSuccess = false;\n\n      function onTransportOpen() {\n        if (self.onlyBinaryUpgrades) {\n          var upgradeLosesBinary = !this.supportsBinary && self.transport.supportsBinary;\n          failed = failed || upgradeLosesBinary;\n        }\n\n        if (failed) return;\n        debug('probe transport \"%s\" opened', name);\n        transport.send([{\n          type: \"ping\",\n          data: \"probe\"\n        }]);\n        transport.once(\"packet\", function (msg) {\n          if (failed) return;\n\n          if (\"pong\" === msg.type && \"probe\" === msg.data) {\n            debug('probe transport \"%s\" pong', name);\n            self.upgrading = true;\n            self.emit(\"upgrading\", transport);\n            if (!transport) return;\n            Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\n            debug('pausing current transport \"%s\"', self.transport.name);\n            self.transport.pause(function () {\n              if (failed) return;\n              if (\"closed\" === self.readyState) return;\n              debug(\"changing transport and sending upgrade packet\");\n              cleanup();\n              self.setTransport(transport);\n              transport.send([{\n                type: \"upgrade\"\n              }]);\n              self.emit(\"upgrade\", transport);\n              transport = null;\n              self.upgrading = false;\n              self.flush();\n            });\n          } else {\n            debug('probe transport \"%s\" failed', name);\n            var err = new Error(\"probe error\");\n            err.transport = transport.name;\n            self.emit(\"upgradeError\", err);\n          }\n        });\n      }\n\n      function freezeTransport() {\n        if (failed) return; // Any callback called by transport should be ignored since now\n\n        failed = true;\n        cleanup();\n        transport.close();\n        transport = null;\n      } // Handle any error that happens while probing\n\n\n      function onerror(err) {\n        var error = new Error(\"probe error: \" + err);\n        error.transport = transport.name;\n        freezeTransport();\n        debug('probe transport \"%s\" failed because of error: %s', name, err);\n        self.emit(\"upgradeError\", error);\n      }\n\n      function onTransportClose() {\n        onerror(\"transport closed\");\n      } // When the socket is closed while we're probing\n\n\n      function onclose() {\n        onerror(\"socket closed\");\n      } // When the socket is upgraded while we're probing\n\n\n      function onupgrade(to) {\n        if (transport && to.name !== transport.name) {\n          debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\n          freezeTransport();\n        }\n      } // Remove all listeners on the transport and on self\n\n\n      function cleanup() {\n        transport.removeListener(\"open\", onTransportOpen);\n        transport.removeListener(\"error\", onerror);\n        transport.removeListener(\"close\", onTransportClose);\n        self.removeListener(\"close\", onclose);\n        self.removeListener(\"upgrading\", onupgrade);\n      }\n\n      transport.once(\"open\", onTransportOpen);\n      transport.once(\"error\", onerror);\n      transport.once(\"close\", onTransportClose);\n      this.once(\"close\", onclose);\n      this.once(\"upgrading\", onupgrade);\n      transport.open();\n    }\n    /**\r\n     * Called when connection is deemed open.\r\n     *\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"onOpen\",\n    value: function onOpen() {\n      debug(\"socket open\");\n      this.readyState = \"open\";\n      Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\n      this.emit(\"open\");\n      this.flush(); // we check for `readyState` in case an `open`\n      // listener already closed the socket\n\n      if (\"open\" === this.readyState && this.opts.upgrade && this.transport.pause) {\n        debug(\"starting upgrade probes\");\n        var i = 0;\n        var l = this.upgrades.length;\n\n        for (; i < l; i++) {\n          this.probe(this.upgrades[i]);\n        }\n      }\n    }\n    /**\r\n     * Handles a packet.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onPacket\",\n    value: function onPacket(packet) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\n        this.emit(\"packet\", packet); // Socket is live - any packet counts\n\n        this.emit(\"heartbeat\");\n\n        switch (packet.type) {\n          case \"open\":\n            this.onHandshake(JSON.parse(packet.data));\n            break;\n\n          case \"ping\":\n            this.resetPingTimeout();\n            this.sendPacket(\"pong\");\n            this.emit(\"pong\");\n            break;\n\n          case \"error\":\n            var err = new Error(\"server error\");\n            err.code = packet.data;\n            this.onError(err);\n            break;\n\n          case \"message\":\n            this.emit(\"data\", packet.data);\n            this.emit(\"message\", packet.data);\n            break;\n        }\n      } else {\n        debug('packet received with socket readyState \"%s\"', this.readyState);\n      }\n    }\n    /**\r\n     * Called upon handshake completion.\r\n     *\r\n     * @param {Object} handshake obj\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onHandshake\",\n    value: function onHandshake(data) {\n      this.emit(\"handshake\", data);\n      this.id = data.sid;\n      this.transport.query.sid = data.sid;\n      this.upgrades = this.filterUpgrades(data.upgrades);\n      this.pingInterval = data.pingInterval;\n      this.pingTimeout = data.pingTimeout;\n      this.onOpen(); // In case open handler closes socket\n\n      if (\"closed\" === this.readyState) return;\n      this.resetPingTimeout();\n    }\n    /**\r\n     * Sets and resets ping timeout timer based on server pings.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"resetPingTimeout\",\n    value: function resetPingTimeout() {\n      var _this2 = this;\n\n      clearTimeout(this.pingTimeoutTimer);\n      this.pingTimeoutTimer = setTimeout(function () {\n        _this2.onClose(\"ping timeout\");\n      }, this.pingInterval + this.pingTimeout);\n    }\n    /**\r\n     * Called on `drain` event\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onDrain\",\n    value: function onDrain() {\n      this.writeBuffer.splice(0, this.prevBufferLen); // setting prevBufferLen = 0 is very important\n      // for example, when upgrading, upgrade packet is sent over,\n      // and a nonzero prevBufferLen could cause problems on `drain`\n\n      this.prevBufferLen = 0;\n\n      if (0 === this.writeBuffer.length) {\n        this.emit(\"drain\");\n      } else {\n        this.flush();\n      }\n    }\n    /**\r\n     * Flush write buffers.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"flush\",\n    value: function flush() {\n      if (\"closed\" !== this.readyState && this.transport.writable && !this.upgrading && this.writeBuffer.length) {\n        debug(\"flushing %d packets in socket\", this.writeBuffer.length);\n        this.transport.send(this.writeBuffer); // keep track of current length of writeBuffer\n        // splice writeBuffer and callbackBuffer on `drain`\n\n        this.prevBufferLen = this.writeBuffer.length;\n        this.emit(\"flush\");\n      }\n    }\n    /**\r\n     * Sends a message.\r\n     *\r\n     * @param {String} message.\r\n     * @param {Function} callback function.\r\n     * @param {Object} options.\r\n     * @return {Socket} for chaining.\r\n     * @api public\r\n     */\n\n  }, {\n    key: \"write\",\n    value: function write(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n  }, {\n    key: \"send\",\n    value: function send(msg, options, fn) {\n      this.sendPacket(\"message\", msg, options, fn);\n      return this;\n    }\n    /**\r\n     * Sends a packet.\r\n     *\r\n     * @param {String} packet type.\r\n     * @param {String} data.\r\n     * @param {Object} options.\r\n     * @param {Function} callback function.\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"sendPacket\",\n    value: function sendPacket(type, data, options, fn) {\n      if (\"function\" === typeof data) {\n        fn = data;\n        data = undefined;\n      }\n\n      if (\"function\" === typeof options) {\n        fn = options;\n        options = null;\n      }\n\n      if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\n        return;\n      }\n\n      options = options || {};\n      options.compress = false !== options.compress;\n      var packet = {\n        type: type,\n        data: data,\n        options: options\n      };\n      this.emit(\"packetCreate\", packet);\n      this.writeBuffer.push(packet);\n      if (fn) this.once(\"flush\", fn);\n      this.flush();\n    }\n    /**\r\n     * Closes the connection.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"close\",\n    value: function close() {\n      var self = this;\n\n      if (\"opening\" === this.readyState || \"open\" === this.readyState) {\n        this.readyState = \"closing\";\n\n        if (this.writeBuffer.length) {\n          this.once(\"drain\", function () {\n            if (this.upgrading) {\n              waitForUpgrade();\n            } else {\n              close();\n            }\n          });\n        } else if (this.upgrading) {\n          waitForUpgrade();\n        } else {\n          close();\n        }\n      }\n\n      function close() {\n        self.onClose(\"forced close\");\n        debug(\"socket closing - telling transport to close\");\n        self.transport.close();\n      }\n\n      function cleanupAndClose() {\n        self.removeListener(\"upgrade\", cleanupAndClose);\n        self.removeListener(\"upgradeError\", cleanupAndClose);\n        close();\n      }\n\n      function waitForUpgrade() {\n        // wait for upgrade to finish since we can't send packets while pausing a transport\n        self.once(\"upgrade\", cleanupAndClose);\n        self.once(\"upgradeError\", cleanupAndClose);\n      }\n\n      return this;\n    }\n    /**\r\n     * Called upon transport error\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onError\",\n    value: function onError(err) {\n      debug(\"socket error %j\", err);\n      Socket.priorWebsocketSuccess = false;\n      this.emit(\"error\", err);\n      this.onClose(\"transport error\", err);\n    }\n    /**\r\n     * Called upon transport close.\r\n     *\r\n     * @api private\r\n     */\n\n  }, {\n    key: \"onClose\",\n    value: function onClose(reason, desc) {\n      if (\"opening\" === this.readyState || \"open\" === this.readyState || \"closing\" === this.readyState) {\n        debug('socket close with reason: \"%s\"', reason);\n        var self = this; // clear timers\n\n        clearTimeout(this.pingIntervalTimer);\n        clearTimeout(this.pingTimeoutTimer); // stop event from firing again for transport\n\n        this.transport.removeAllListeners(\"close\"); // ensure transport won't stay open\n\n        this.transport.close(); // ignore further transport communication\n\n        this.transport.removeAllListeners(); // set ready state\n\n        this.readyState = \"closed\"; // clear session id\n\n        this.id = null; // emit close event\n\n        this.emit(\"close\", reason, desc); // clean buffers after, so users can still\n        // grab the buffers on `close` event\n\n        self.writeBuffer = [];\n        self.prevBufferLen = 0;\n      }\n    }\n    /**\r\n     * Filters upgrades, returning only those matching client transports.\r\n     *\r\n     * @param {Array} server upgrades\r\n     * @api private\r\n     *\r\n     */\n\n  }, {\n    key: \"filterUpgrades\",\n    value: function filterUpgrades(upgrades) {\n      var filteredUpgrades = [];\n      var i = 0;\n      var j = upgrades.length;\n\n      for (; i < j; i++) {\n        if (~this.transports.indexOf(upgrades[i])) filteredUpgrades.push(upgrades[i]);\n      }\n\n      return filteredUpgrades;\n    }\n  }]);\n\n  return Socket;\n}(Emitter);\n\nSocket.priorWebsocketSuccess = false;\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\n\nSocket.protocol = parser.protocol; // this is an int\n\nfunction clone(obj) {\n  var o = {};\n\n  for (var i in obj) {\n    if (obj.hasOwnProperty(i)) {\n      o[i] = obj[i];\n    }\n  }\n\n  return o;\n}\n\nmodule.exports = Socket;","map":{"version":3,"sources":["C:/Users/louis/Documents/info/S3/UE3/M3301/rendus/Front-end/my-app/node_modules/engine.io-client/lib/socket.js"],"names":["transports","require","Emitter","debug","parser","parseuri","parseqs","Socket","uri","opts","hostname","host","secure","protocol","port","query","location","readyState","writeBuffer","prevBufferLen","Object","assign","path","agent","withCredentials","upgrade","jsonp","timestampParam","rememberUpgrade","rejectUnauthorized","perMessageDeflate","threshold","transportOptions","replace","decode","id","upgrades","pingInterval","pingTimeout","pingTimeoutTimer","open","name","clone","EIO","transport","sid","socket","priorWebsocketSuccess","indexOf","length","self","setTimeout","emit","createTransport","e","shift","setTransport","removeAllListeners","on","onDrain","packet","onPacket","onError","onClose","probe","failed","onTransportOpen","onlyBinaryUpgrades","upgradeLosesBinary","supportsBinary","send","type","data","once","msg","upgrading","pause","cleanup","flush","err","Error","freezeTransport","close","onerror","error","onTransportClose","onclose","onupgrade","to","removeListener","i","l","onHandshake","JSON","parse","resetPingTimeout","sendPacket","code","filterUpgrades","onOpen","clearTimeout","splice","writable","options","fn","undefined","compress","push","waitForUpgrade","cleanupAndClose","reason","desc","pingIntervalTimer","filteredUpgrades","j","obj","o","hasOwnProperty","module","exports"],"mappings":"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","sourcesContent":["const transports = require(\"./transports/index\");\r\nconst Emitter = require(\"component-emitter\");\r\nconst debug = require(\"debug\")(\"engine.io-client:socket\");\r\nconst parser = require(\"engine.io-parser\");\r\nconst parseuri = require(\"parseuri\");\r\nconst parseqs = require(\"parseqs\");\r\n\r\nclass Socket extends Emitter {\r\n  /**\r\n   * Socket constructor.\r\n   *\r\n   * @param {String|Object} uri or options\r\n   * @param {Object} options\r\n   * @api public\r\n   */\r\n  constructor(uri, opts = {}) {\r\n    super();\r\n\r\n    if (uri && \"object\" === typeof uri) {\r\n      opts = uri;\r\n      uri = null;\r\n    }\r\n\r\n    if (uri) {\r\n      uri = parseuri(uri);\r\n      opts.hostname = uri.host;\r\n      opts.secure = uri.protocol === \"https\" || uri.protocol === \"wss\";\r\n      opts.port = uri.port;\r\n      if (uri.query) opts.query = uri.query;\r\n    } else if (opts.host) {\r\n      opts.hostname = parseuri(opts.host).host;\r\n    }\r\n\r\n    this.secure =\r\n      null != opts.secure\r\n        ? opts.secure\r\n        : typeof location !== \"undefined\" && \"https:\" === location.protocol;\r\n\r\n    if (opts.hostname && !opts.port) {\r\n      // if no port is specified manually, use the protocol default\r\n      opts.port = this.secure ? \"443\" : \"80\";\r\n    }\r\n\r\n    this.hostname =\r\n      opts.hostname ||\r\n      (typeof location !== \"undefined\" ? location.hostname : \"localhost\");\r\n    this.port =\r\n      opts.port ||\r\n      (typeof location !== \"undefined\" && location.port\r\n        ? location.port\r\n        : this.secure\r\n        ? 443\r\n        : 80);\r\n\r\n    this.transports = opts.transports || [\"polling\", \"websocket\"];\r\n    this.readyState = \"\";\r\n    this.writeBuffer = [];\r\n    this.prevBufferLen = 0;\r\n\r\n    this.opts = Object.assign(\r\n      {\r\n        path: \"/engine.io\",\r\n        agent: false,\r\n        withCredentials: false,\r\n        upgrade: true,\r\n        jsonp: true,\r\n        timestampParam: \"t\",\r\n        rememberUpgrade: false,\r\n        rejectUnauthorized: true,\r\n        perMessageDeflate: {\r\n          threshold: 1024\r\n        },\r\n        transportOptions: {}\r\n      },\r\n      opts\r\n    );\r\n\r\n    this.opts.path = this.opts.path.replace(/\\/$/, \"\") + \"/\";\r\n\r\n    if (typeof this.opts.query === \"string\") {\r\n      this.opts.query = parseqs.decode(this.opts.query);\r\n    }\r\n\r\n    // set on handshake\r\n    this.id = null;\r\n    this.upgrades = null;\r\n    this.pingInterval = null;\r\n    this.pingTimeout = null;\r\n\r\n    // set on heartbeat\r\n    this.pingTimeoutTimer = null;\r\n\r\n    this.open();\r\n  }\r\n\r\n  /**\r\n   * Creates transport of the given type.\r\n   *\r\n   * @param {String} transport name\r\n   * @return {Transport}\r\n   * @api private\r\n   */\r\n  createTransport(name) {\r\n    debug('creating transport \"%s\"', name);\r\n    const query = clone(this.opts.query);\r\n\r\n    // append engine.io protocol identifier\r\n    query.EIO = parser.protocol;\r\n\r\n    // transport name\r\n    query.transport = name;\r\n\r\n    // session id if we already have one\r\n    if (this.id) query.sid = this.id;\r\n\r\n    const opts = Object.assign(\r\n      {},\r\n      this.opts.transportOptions[name],\r\n      this.opts,\r\n      {\r\n        query,\r\n        socket: this,\r\n        hostname: this.hostname,\r\n        secure: this.secure,\r\n        port: this.port\r\n      }\r\n    );\r\n\r\n    debug(\"options: %j\", opts);\r\n\r\n    return new transports[name](opts);\r\n  }\r\n\r\n  /**\r\n   * Initializes transport to use and starts probe.\r\n   *\r\n   * @api private\r\n   */\r\n  open() {\r\n    let transport;\r\n    if (\r\n      this.opts.rememberUpgrade &&\r\n      Socket.priorWebsocketSuccess &&\r\n      this.transports.indexOf(\"websocket\") !== -1\r\n    ) {\r\n      transport = \"websocket\";\r\n    } else if (0 === this.transports.length) {\r\n      // Emit error on next tick so it can be listened to\r\n      const self = this;\r\n      setTimeout(function() {\r\n        self.emit(\"error\", \"No transports available\");\r\n      }, 0);\r\n      return;\r\n    } else {\r\n      transport = this.transports[0];\r\n    }\r\n    this.readyState = \"opening\";\r\n\r\n    // Retry with the next transport if the transport is disabled (jsonp: false)\r\n    try {\r\n      transport = this.createTransport(transport);\r\n    } catch (e) {\r\n      debug(\"error while creating transport: %s\", e);\r\n      this.transports.shift();\r\n      this.open();\r\n      return;\r\n    }\r\n\r\n    transport.open();\r\n    this.setTransport(transport);\r\n  }\r\n\r\n  /**\r\n   * Sets the current transport. Disables the existing one (if any).\r\n   *\r\n   * @api private\r\n   */\r\n  setTransport(transport) {\r\n    debug(\"setting transport %s\", transport.name);\r\n    const self = this;\r\n\r\n    if (this.transport) {\r\n      debug(\"clearing existing transport %s\", this.transport.name);\r\n      this.transport.removeAllListeners();\r\n    }\r\n\r\n    // set up transport\r\n    this.transport = transport;\r\n\r\n    // set up transport listeners\r\n    transport\r\n      .on(\"drain\", function() {\r\n        self.onDrain();\r\n      })\r\n      .on(\"packet\", function(packet) {\r\n        self.onPacket(packet);\r\n      })\r\n      .on(\"error\", function(e) {\r\n        self.onError(e);\r\n      })\r\n      .on(\"close\", function() {\r\n        self.onClose(\"transport close\");\r\n      });\r\n  }\r\n\r\n  /**\r\n   * Probes a transport.\r\n   *\r\n   * @param {String} transport name\r\n   * @api private\r\n   */\r\n  probe(name) {\r\n    debug('probing transport \"%s\"', name);\r\n    let transport = this.createTransport(name, { probe: 1 });\r\n    let failed = false;\r\n    const self = this;\r\n\r\n    Socket.priorWebsocketSuccess = false;\r\n\r\n    function onTransportOpen() {\r\n      if (self.onlyBinaryUpgrades) {\r\n        const upgradeLosesBinary =\r\n          !this.supportsBinary && self.transport.supportsBinary;\r\n        failed = failed || upgradeLosesBinary;\r\n      }\r\n      if (failed) return;\r\n\r\n      debug('probe transport \"%s\" opened', name);\r\n      transport.send([{ type: \"ping\", data: \"probe\" }]);\r\n      transport.once(\"packet\", function(msg) {\r\n        if (failed) return;\r\n        if (\"pong\" === msg.type && \"probe\" === msg.data) {\r\n          debug('probe transport \"%s\" pong', name);\r\n          self.upgrading = true;\r\n          self.emit(\"upgrading\", transport);\r\n          if (!transport) return;\r\n          Socket.priorWebsocketSuccess = \"websocket\" === transport.name;\r\n\r\n          debug('pausing current transport \"%s\"', self.transport.name);\r\n          self.transport.pause(function() {\r\n            if (failed) return;\r\n            if (\"closed\" === self.readyState) return;\r\n            debug(\"changing transport and sending upgrade packet\");\r\n\r\n            cleanup();\r\n\r\n            self.setTransport(transport);\r\n            transport.send([{ type: \"upgrade\" }]);\r\n            self.emit(\"upgrade\", transport);\r\n            transport = null;\r\n            self.upgrading = false;\r\n            self.flush();\r\n          });\r\n        } else {\r\n          debug('probe transport \"%s\" failed', name);\r\n          const err = new Error(\"probe error\");\r\n          err.transport = transport.name;\r\n          self.emit(\"upgradeError\", err);\r\n        }\r\n      });\r\n    }\r\n\r\n    function freezeTransport() {\r\n      if (failed) return;\r\n\r\n      // Any callback called by transport should be ignored since now\r\n      failed = true;\r\n\r\n      cleanup();\r\n\r\n      transport.close();\r\n      transport = null;\r\n    }\r\n\r\n    // Handle any error that happens while probing\r\n    function onerror(err) {\r\n      const error = new Error(\"probe error: \" + err);\r\n      error.transport = transport.name;\r\n\r\n      freezeTransport();\r\n\r\n      debug('probe transport \"%s\" failed because of error: %s', name, err);\r\n\r\n      self.emit(\"upgradeError\", error);\r\n    }\r\n\r\n    function onTransportClose() {\r\n      onerror(\"transport closed\");\r\n    }\r\n\r\n    // When the socket is closed while we're probing\r\n    function onclose() {\r\n      onerror(\"socket closed\");\r\n    }\r\n\r\n    // When the socket is upgraded while we're probing\r\n    function onupgrade(to) {\r\n      if (transport && to.name !== transport.name) {\r\n        debug('\"%s\" works - aborting \"%s\"', to.name, transport.name);\r\n        freezeTransport();\r\n      }\r\n    }\r\n\r\n    // Remove all listeners on the transport and on self\r\n    function cleanup() {\r\n      transport.removeListener(\"open\", onTransportOpen);\r\n      transport.removeListener(\"error\", onerror);\r\n      transport.removeListener(\"close\", onTransportClose);\r\n      self.removeListener(\"close\", onclose);\r\n      self.removeListener(\"upgrading\", onupgrade);\r\n    }\r\n\r\n    transport.once(\"open\", onTransportOpen);\r\n    transport.once(\"error\", onerror);\r\n    transport.once(\"close\", onTransportClose);\r\n\r\n    this.once(\"close\", onclose);\r\n    this.once(\"upgrading\", onupgrade);\r\n\r\n    transport.open();\r\n  }\r\n\r\n  /**\r\n   * Called when connection is deemed open.\r\n   *\r\n   * @api public\r\n   */\r\n  onOpen() {\r\n    debug(\"socket open\");\r\n    this.readyState = \"open\";\r\n    Socket.priorWebsocketSuccess = \"websocket\" === this.transport.name;\r\n    this.emit(\"open\");\r\n    this.flush();\r\n\r\n    // we check for `readyState` in case an `open`\r\n    // listener already closed the socket\r\n    if (\r\n      \"open\" === this.readyState &&\r\n      this.opts.upgrade &&\r\n      this.transport.pause\r\n    ) {\r\n      debug(\"starting upgrade probes\");\r\n      let i = 0;\r\n      const l = this.upgrades.length;\r\n      for (; i < l; i++) {\r\n        this.probe(this.upgrades[i]);\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handles a packet.\r\n   *\r\n   * @api private\r\n   */\r\n  onPacket(packet) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket receive: type \"%s\", data \"%s\"', packet.type, packet.data);\r\n\r\n      this.emit(\"packet\", packet);\r\n\r\n      // Socket is live - any packet counts\r\n      this.emit(\"heartbeat\");\r\n\r\n      switch (packet.type) {\r\n        case \"open\":\r\n          this.onHandshake(JSON.parse(packet.data));\r\n          break;\r\n\r\n        case \"ping\":\r\n          this.resetPingTimeout();\r\n          this.sendPacket(\"pong\");\r\n          this.emit(\"pong\");\r\n          break;\r\n\r\n        case \"error\":\r\n          const err = new Error(\"server error\");\r\n          err.code = packet.data;\r\n          this.onError(err);\r\n          break;\r\n\r\n        case \"message\":\r\n          this.emit(\"data\", packet.data);\r\n          this.emit(\"message\", packet.data);\r\n          break;\r\n      }\r\n    } else {\r\n      debug('packet received with socket readyState \"%s\"', this.readyState);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Called upon handshake completion.\r\n   *\r\n   * @param {Object} handshake obj\r\n   * @api private\r\n   */\r\n  onHandshake(data) {\r\n    this.emit(\"handshake\", data);\r\n    this.id = data.sid;\r\n    this.transport.query.sid = data.sid;\r\n    this.upgrades = this.filterUpgrades(data.upgrades);\r\n    this.pingInterval = data.pingInterval;\r\n    this.pingTimeout = data.pingTimeout;\r\n    this.onOpen();\r\n    // In case open handler closes socket\r\n    if (\"closed\" === this.readyState) return;\r\n    this.resetPingTimeout();\r\n  }\r\n\r\n  /**\r\n   * Sets and resets ping timeout timer based on server pings.\r\n   *\r\n   * @api private\r\n   */\r\n  resetPingTimeout() {\r\n    clearTimeout(this.pingTimeoutTimer);\r\n    this.pingTimeoutTimer = setTimeout(() => {\r\n      this.onClose(\"ping timeout\");\r\n    }, this.pingInterval + this.pingTimeout);\r\n  }\r\n\r\n  /**\r\n   * Called on `drain` event\r\n   *\r\n   * @api private\r\n   */\r\n  onDrain() {\r\n    this.writeBuffer.splice(0, this.prevBufferLen);\r\n\r\n    // setting prevBufferLen = 0 is very important\r\n    // for example, when upgrading, upgrade packet is sent over,\r\n    // and a nonzero prevBufferLen could cause problems on `drain`\r\n    this.prevBufferLen = 0;\r\n\r\n    if (0 === this.writeBuffer.length) {\r\n      this.emit(\"drain\");\r\n    } else {\r\n      this.flush();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Flush write buffers.\r\n   *\r\n   * @api private\r\n   */\r\n  flush() {\r\n    if (\r\n      \"closed\" !== this.readyState &&\r\n      this.transport.writable &&\r\n      !this.upgrading &&\r\n      this.writeBuffer.length\r\n    ) {\r\n      debug(\"flushing %d packets in socket\", this.writeBuffer.length);\r\n      this.transport.send(this.writeBuffer);\r\n      // keep track of current length of writeBuffer\r\n      // splice writeBuffer and callbackBuffer on `drain`\r\n      this.prevBufferLen = this.writeBuffer.length;\r\n      this.emit(\"flush\");\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Sends a message.\r\n   *\r\n   * @param {String} message.\r\n   * @param {Function} callback function.\r\n   * @param {Object} options.\r\n   * @return {Socket} for chaining.\r\n   * @api public\r\n   */\r\n  write(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  send(msg, options, fn) {\r\n    this.sendPacket(\"message\", msg, options, fn);\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Sends a packet.\r\n   *\r\n   * @param {String} packet type.\r\n   * @param {String} data.\r\n   * @param {Object} options.\r\n   * @param {Function} callback function.\r\n   * @api private\r\n   */\r\n  sendPacket(type, data, options, fn) {\r\n    if (\"function\" === typeof data) {\r\n      fn = data;\r\n      data = undefined;\r\n    }\r\n\r\n    if (\"function\" === typeof options) {\r\n      fn = options;\r\n      options = null;\r\n    }\r\n\r\n    if (\"closing\" === this.readyState || \"closed\" === this.readyState) {\r\n      return;\r\n    }\r\n\r\n    options = options || {};\r\n    options.compress = false !== options.compress;\r\n\r\n    const packet = {\r\n      type: type,\r\n      data: data,\r\n      options: options\r\n    };\r\n    this.emit(\"packetCreate\", packet);\r\n    this.writeBuffer.push(packet);\r\n    if (fn) this.once(\"flush\", fn);\r\n    this.flush();\r\n  }\r\n\r\n  /**\r\n   * Closes the connection.\r\n   *\r\n   * @api private\r\n   */\r\n  close() {\r\n    const self = this;\r\n\r\n    if (\"opening\" === this.readyState || \"open\" === this.readyState) {\r\n      this.readyState = \"closing\";\r\n\r\n      if (this.writeBuffer.length) {\r\n        this.once(\"drain\", function() {\r\n          if (this.upgrading) {\r\n            waitForUpgrade();\r\n          } else {\r\n            close();\r\n          }\r\n        });\r\n      } else if (this.upgrading) {\r\n        waitForUpgrade();\r\n      } else {\r\n        close();\r\n      }\r\n    }\r\n\r\n    function close() {\r\n      self.onClose(\"forced close\");\r\n      debug(\"socket closing - telling transport to close\");\r\n      self.transport.close();\r\n    }\r\n\r\n    function cleanupAndClose() {\r\n      self.removeListener(\"upgrade\", cleanupAndClose);\r\n      self.removeListener(\"upgradeError\", cleanupAndClose);\r\n      close();\r\n    }\r\n\r\n    function waitForUpgrade() {\r\n      // wait for upgrade to finish since we can't send packets while pausing a transport\r\n      self.once(\"upgrade\", cleanupAndClose);\r\n      self.once(\"upgradeError\", cleanupAndClose);\r\n    }\r\n\r\n    return this;\r\n  }\r\n\r\n  /**\r\n   * Called upon transport error\r\n   *\r\n   * @api private\r\n   */\r\n  onError(err) {\r\n    debug(\"socket error %j\", err);\r\n    Socket.priorWebsocketSuccess = false;\r\n    this.emit(\"error\", err);\r\n    this.onClose(\"transport error\", err);\r\n  }\r\n\r\n  /**\r\n   * Called upon transport close.\r\n   *\r\n   * @api private\r\n   */\r\n  onClose(reason, desc) {\r\n    if (\r\n      \"opening\" === this.readyState ||\r\n      \"open\" === this.readyState ||\r\n      \"closing\" === this.readyState\r\n    ) {\r\n      debug('socket close with reason: \"%s\"', reason);\r\n      const self = this;\r\n\r\n      // clear timers\r\n      clearTimeout(this.pingIntervalTimer);\r\n      clearTimeout(this.pingTimeoutTimer);\r\n\r\n      // stop event from firing again for transport\r\n      this.transport.removeAllListeners(\"close\");\r\n\r\n      // ensure transport won't stay open\r\n      this.transport.close();\r\n\r\n      // ignore further transport communication\r\n      this.transport.removeAllListeners();\r\n\r\n      // set ready state\r\n      this.readyState = \"closed\";\r\n\r\n      // clear session id\r\n      this.id = null;\r\n\r\n      // emit close event\r\n      this.emit(\"close\", reason, desc);\r\n\r\n      // clean buffers after, so users can still\r\n      // grab the buffers on `close` event\r\n      self.writeBuffer = [];\r\n      self.prevBufferLen = 0;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Filters upgrades, returning only those matching client transports.\r\n   *\r\n   * @param {Array} server upgrades\r\n   * @api private\r\n   *\r\n   */\r\n  filterUpgrades(upgrades) {\r\n    const filteredUpgrades = [];\r\n    let i = 0;\r\n    const j = upgrades.length;\r\n    for (; i < j; i++) {\r\n      if (~this.transports.indexOf(upgrades[i]))\r\n        filteredUpgrades.push(upgrades[i]);\r\n    }\r\n    return filteredUpgrades;\r\n  }\r\n}\r\n\r\nSocket.priorWebsocketSuccess = false;\r\n\r\n/**\r\n * Protocol version.\r\n *\r\n * @api public\r\n */\r\n\r\nSocket.protocol = parser.protocol; // this is an int\r\n\r\nfunction clone(obj) {\r\n  const o = {};\r\n  for (let i in obj) {\r\n    if (obj.hasOwnProperty(i)) {\r\n      o[i] = obj[i];\r\n    }\r\n  }\r\n  return o;\r\n}\r\n\r\nmodule.exports = Socket;\r\n"]},"metadata":{},"sourceType":"script"}